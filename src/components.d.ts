/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface BtButton {
        "disabled": boolean;
        "hideText": boolean;
        /**
          * Properties for controlling button states
         */
        "loading": boolean;
        "success": boolean;
        "validate"?: boolean;
    }
    interface BtStepItem {
        "loaded": boolean;
        /**
          * Método para ejecutar una tarea asíncrona. Notifica al padre antes y después de la ejecución.
         */
        "task": (cb: () => Promise<void>) => Promise<void>;
    }
    interface BtStepper {
        "setStepValidity": (index: number, isValid: boolean) => Promise<void>;
    }
    interface BtTable {
        "headers": { key: string; label: string; sortable?: boolean; filterable?: boolean; action?: boolean }[];
        "onCellAction": (handler: (row: { [key: string]: any; }, key: string) => void) => Promise<void>;
        "pageSize": number;
        "rows": { [key: string]: any }[];
    }
}
export interface BtButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBtButtonElement;
}
export interface BtStepItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBtStepItemElement;
}
export interface BtStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBtStepperElement;
}
declare global {
    interface HTMLBtButtonElementEventMap {
        "btButtonClick": { valid: boolean };
    }
    interface HTMLBtButtonElement extends Components.BtButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBtButtonElementEventMap>(type: K, listener: (this: HTMLBtButtonElement, ev: BtButtonCustomEvent<HTMLBtButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBtButtonElementEventMap>(type: K, listener: (this: HTMLBtButtonElement, ev: BtButtonCustomEvent<HTMLBtButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBtButtonElement: {
        prototype: HTMLBtButtonElement;
        new (): HTMLBtButtonElement;
    };
    interface HTMLBtStepItemElementEventMap {
        "asyncStart": void;
        "asyncEnd": void;
    }
    interface HTMLBtStepItemElement extends Components.BtStepItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBtStepItemElementEventMap>(type: K, listener: (this: HTMLBtStepItemElement, ev: BtStepItemCustomEvent<HTMLBtStepItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBtStepItemElementEventMap>(type: K, listener: (this: HTMLBtStepItemElement, ev: BtStepItemCustomEvent<HTMLBtStepItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBtStepItemElement: {
        prototype: HTMLBtStepItemElement;
        new (): HTMLBtStepItemElement;
    };
    interface HTMLBtStepperElementEventMap {
        "step": number;
    }
    interface HTMLBtStepperElement extends Components.BtStepper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBtStepperElementEventMap>(type: K, listener: (this: HTMLBtStepperElement, ev: BtStepperCustomEvent<HTMLBtStepperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBtStepperElementEventMap>(type: K, listener: (this: HTMLBtStepperElement, ev: BtStepperCustomEvent<HTMLBtStepperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBtStepperElement: {
        prototype: HTMLBtStepperElement;
        new (): HTMLBtStepperElement;
    };
    interface HTMLBtTableElement extends Components.BtTable, HTMLStencilElement {
    }
    var HTMLBtTableElement: {
        prototype: HTMLBtTableElement;
        new (): HTMLBtTableElement;
    };
    interface HTMLElementTagNameMap {
        "bt-button": HTMLBtButtonElement;
        "bt-step-item": HTMLBtStepItemElement;
        "bt-stepper": HTMLBtStepperElement;
        "bt-table": HTMLBtTableElement;
    }
}
declare namespace LocalJSX {
    interface BtButton {
        "disabled"?: boolean;
        "hideText"?: boolean;
        /**
          * Properties for controlling button states
         */
        "loading"?: boolean;
        /**
          * Event emitted when the button is clicked
         */
        "onBtButtonClick"?: (event: BtButtonCustomEvent<{ valid: boolean }>) => void;
        "success"?: boolean;
        "validate"?: boolean;
    }
    interface BtStepItem {
        "loaded"?: boolean;
        "onAsyncEnd"?: (event: BtStepItemCustomEvent<void>) => void;
        "onAsyncStart"?: (event: BtStepItemCustomEvent<void>) => void;
    }
    interface BtStepper {
        "onStep"?: (event: BtStepperCustomEvent<number>) => void;
    }
    interface BtTable {
        "headers"?: { key: string; label: string; sortable?: boolean; filterable?: boolean; action?: boolean }[];
        "pageSize"?: number;
        "rows"?: { [key: string]: any }[];
    }
    interface IntrinsicElements {
        "bt-button": BtButton;
        "bt-step-item": BtStepItem;
        "bt-stepper": BtStepper;
        "bt-table": BtTable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bt-button": LocalJSX.BtButton & JSXBase.HTMLAttributes<HTMLBtButtonElement>;
            "bt-step-item": LocalJSX.BtStepItem & JSXBase.HTMLAttributes<HTMLBtStepItemElement>;
            "bt-stepper": LocalJSX.BtStepper & JSXBase.HTMLAttributes<HTMLBtStepperElement>;
            "bt-table": LocalJSX.BtTable & JSXBase.HTMLAttributes<HTMLBtTableElement>;
        }
    }
}
